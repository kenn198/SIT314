[
    {
        "id": "e1436f624107882c",
        "type": "function",
        "z": "5ca39c589d581bbe",
        "name": "Alert",
        "func": "let pressure = msg.payload.pressure ;\n\nif (pressure >= 120) {\n    // Handle emergency\n    msg.payload = { command: 'EXPLODE_EMERGENCY' };\n    context.set('emergency', true);  // Mark emergency in context\n} else if (pressure >= 100) {\n    // Stop flow if in the danger zone\n    msg.payload = { command: 'RESTART_FLOW' };\n} else {\n    // Normal flow, continue if no emergency\n    if (!context.get('emergency')) {\n        msg.payload = { command: 'CONTINUE_FLOW' };\n    }\n}\n\n// Reset the emergency flag if pressure drops below 120 PSI\nif (pressure < 120) {\n    context.set('emergency', false);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "e3fe9dfedf082d22",
                "54b4ebd665c27f14"
            ]
        ]
    },
    {
        "id": "1f49ef98b3ebba4f",
        "type": "mqtt in",
        "z": "5ca39c589d581bbe",
        "name": "",
        "topic": "gasTank/pressure",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9ea66c502cd387bd",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 360,
        "wires": [
            [
                "e1436f624107882c",
                "13f1fae87fdf38dd",
                "203fd92e6bb73cdc",
                "4b57d55cb0bd96a0"
            ]
        ]
    },
    {
        "id": "e3fe9dfedf082d22",
        "type": "mqtt out",
        "z": "5ca39c589d581bbe",
        "name": "",
        "topic": "gasTank/commands",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ea66c502cd387bd",
        "x": 980,
        "y": 440,
        "wires": []
    },
    {
        "id": "54b4ebd665c27f14",
        "type": "debug",
        "z": "5ca39c589d581bbe",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 360,
        "wires": []
    },
    {
        "id": "a186bd0160844ee1",
        "type": "mongodb out",
        "z": "5ca39c589d581bbe",
        "mongodb": "1f3c39e2103abbac",
        "name": "",
        "collection": "Pressure",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 1200,
        "y": 280,
        "wires": []
    },
    {
        "id": "203fd92e6bb73cdc",
        "type": "function",
        "z": "5ca39c589d581bbe",
        "name": "Database_conversion",
        "func": "let index = context.get('index') || 0;  // Retrieve the last stored index\nlet pressure = msg.payload.pressure || msg.payload.flow;\n\n// Increment the index\nindex += 1;\ncontext.set('index', index);  // Store the new index for the next round\n\n// Only store data when pressure exceeds 100 PSI\nif (pressure > 100) {\n    // Prepare the payload to be sent to MongoDB\n    msg.payload = {\n        index: index,\n        pressure: pressure,\n        timestamp: new Date()  // Store the current timestamp\n    };\n    return msg;  // Pass the message to MongoDB\n} else {\n    return null;  // Don't pass any message to MongoDB if pressure is below threshold\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "a186bd0160844ee1",
                "8ac18dbd368e8c6d"
            ]
        ]
    },
    {
        "id": "8ac18dbd368e8c6d",
        "type": "debug",
        "z": "5ca39c589d581bbe",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 200,
        "wires": []
    },
    {
        "id": "2baad1b6f4a4a5cf",
        "type": "mqtt in",
        "z": "5ca39c589d581bbe",
        "name": "",
        "topic": "gasTank/dashboard",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e913ac43d2c0aeb8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 540,
        "wires": [
            [
                "b783f70449f2992b",
                "13f1fae87fdf38dd"
            ]
        ]
    },
    {
        "id": "b783f70449f2992b",
        "type": "debug",
        "z": "5ca39c589d581bbe",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 600,
        "wires": []
    },
    {
        "id": "13f1fae87fdf38dd",
        "type": "function",
        "z": "5ca39c589d581bbe",
        "name": "Dashboard_commands",
        "func": "// Initialize the output message\nlet outputMsg = {};\noutputMsg.topic = 'gasTank/commands';\n\n// Check where the message is coming from (dashboard or pressure sensor)\nif (msg.topic === 'gasTank/pressure') {\n    // Store the pressure in a global variable for later use\n    global.set('currentPressure', msg.payload.pressure);\n    // No need to return anything yet, just store the pressure\n    return null;\n} else if (msg.topic === 'gasTank/dashboard') {\n    // This is a dashboard command, handle it\n    let dashboardCommand = msg.payload.command;\n    let pressure = global.get('currentPressure'); // Retrieve the stored pressure\n\n    // Switch case to handle various dashboard commands\n    switch (dashboardCommand) {\n        case 'Continue_flow':\n            outputMsg.payload = { command: 'RESUMED_FLOW' };\n            break;\n        case 'Stop_flow':\n            outputMsg.payload = { command: 'STOP_FLOW' };\n            break;\n        case 'Restart_flow':\n            outputMsg.payload = { command: 'RESTART_FLOW' };\n            break;\n        case 'Check_status':\n            // Ensure pressure is defined; otherwise, warn\n            if (pressure !== undefined) {\n                outputMsg.payload = { message: `Pressure is ${pressure}` };\n            } else {\n                outputMsg.payload = { message: \"Pressure is not available\" };\n            }\n            outputMsg.topic = 'gasTank/dashboards'; // Send response to dashboard\n            break;\n        default:\n            node.warn('Unknown command from dashboard: ' + dashboardCommand);\n            return null; // Don't send anything if the command is unknown\n    }\n\n    // Return the message for the next node (e.g., MQTT out node)\n    return outputMsg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 480,
        "wires": [
            [
                "2796fb1c60693999",
                "e3fe9dfedf082d22",
                "ff57309a924bbb1d"
            ]
        ]
    },
    {
        "id": "2796fb1c60693999",
        "type": "debug",
        "z": "5ca39c589d581bbe",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 540,
        "wires": []
    },
    {
        "id": "ff57309a924bbb1d",
        "type": "mqtt out",
        "z": "5ca39c589d581bbe",
        "name": "",
        "topic": "gasTank/dashboards",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "26ecb3f091a3826a",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "4b57d55cb0bd96a0",
        "type": "debug",
        "z": "5ca39c589d581bbe",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 260,
        "wires": []
    },
    {
        "id": "9ea66c502cd387bd",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1f3c39e2103abbac",
        "type": "mongodb",
        "hostname": "127.0.0.1",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "Valve",
        "name": ""
    },
    {
        "id": "e913ac43d2c0aeb8",
        "type": "mqtt-broker",
        "name": "test",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "26ecb3f091a3826a",
        "type": "mqtt-broker",
        "name": "Dashboard",
        "broker": "mqtt://broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]